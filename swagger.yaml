---
swagger: "2.0"
info:
  title: Swagger Petstore
  version: 1.0.0
  termsOfService: "http://swagger.io/terms/"
paths:
  /pet:
    post:
      summary: Add a new pet to the store
      description: ""
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      tags:
        - pet
      operationId: addPet
      responses:
        "405":
          description: Invalid input
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/Pet"
    put:
      summary: Update an existing pet
      description: ""
      consumes:
        - application/json
        - application/xml
      produces:
        - application/xml
        - application/json
      tags:
        - pet
      operationId: updatePet
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
        "405":
          description: Validation exception
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/Pet"
  /pet/findByStatus:
    get:
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      produces:
        - application/xml
        - application/json
      tags:
        - pet
      operationId: findPetsByStatus
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: Invalid status value
      parameters:
        - name: status
          in: query
          required: true
          type: array
  /pet/findByTags:
    get:
      summary: Finds Pets by tags
      description: "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing."
      produces:
        - application/xml
        - application/json
      tags:
        - pet
      operationId: findPetsByTags
      responses:
        "200":
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/Pet"
        "400":
          description: Invalid tag value
      parameters:
        - name: tags
          in: query
          required: true
          type: array
  "/pet/{petId}":
    get:
      summary: Find pet by ID
      description: Returns a single pet
      produces:
        - application/xml
        - application/json
      tags:
        - pet
      operationId: getPetById
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Pet"
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      parameters:
        - name: petId
          in: path
          required: true
          type: integer
          format: int64
    post:
      summary: Updates a pet in the store with form data
      description: ""
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/xml
        - application/json
      tags:
        - pet
      operationId: updatePetWithForm
      responses:
        "405":
          description: Invalid input
      parameters:
        - name: petId
          in: path
          required: true
          type: integer
          format: int64
        - name: name
          in: formData
          required: false
          type: string
        - name: status
          in: formData
          required: false
          type: string
    delete:
      summary: Deletes a pet
      description: ""
      produces:
        - application/xml
        - application/json
      tags:
        - pet
      operationId: deletePet
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Pet not found
      parameters:
        - name: api_key
          in: header
          required: false
          type: string
        - name: petId
          in: path
          required: true
          type: integer
          format: int64
  "/pet/{petId}/uploadImage":
    post:
      summary: uploads an image
      description: ""
      consumes:
        - multipart/form-data
      produces:
        - application/json
      tags:
        - pet
      operationId: uploadFile
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/ApiResponse"
      parameters:
        - name: petId
          in: path
          required: true
          type: integer
          format: int64
        - name: additionalMetadata
          in: formData
          required: false
          type: string
        - name: file
          in: formData
          required: false
          type: file
  /store/inventory:
    get:
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      produces:
        - application/json
      tags:
        - store
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          schema:
            type: object
      parameters: []
  /store/order:
    post:
      summary: Place an order for a pet
      description: ""
      produces:
        - application/xml
        - application/json
      tags:
        - store
      operationId: placeOrder
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: Invalid Order
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/Order"
  "/store/order/{orderId}":
    get:
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions
      produces:
        - application/xml
        - application/json
      tags:
        - store
      operationId: getOrderById
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/Order"
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      parameters:
        - name: orderId
          in: path
          required: true
          type: integer
          format: int64
    delete:
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors
      produces:
        - application/xml
        - application/json
      tags:
        - store
      operationId: deleteOrder
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      parameters:
        - name: orderId
          in: path
          required: true
          type: integer
          format: int64
  /user:
    post:
      summary: Create user
      description: This can only be done by the logged in user.
      produces:
        - application/xml
        - application/json
      tags:
        - user
      operationId: createUser
      responses:
        default:
          description: successful operation
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
  /user/createWithArray:
    post:
      summary: Creates list of users with given input array
      description: ""
      produces:
        - application/xml
        - application/json
      tags:
        - user
      operationId: createUsersWithArrayInput
      responses:
        default:
          description: successful operation
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
  /user/createWithList:
    post:
      summary: Creates list of users with given input array
      description: ""
      produces:
        - application/xml
        - application/json
      tags:
        - user
      operationId: createUsersWithListInput
      responses:
        default:
          description: successful operation
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
  /user/login:
    get:
      summary: Logs user into the system
      description: ""
      produces:
        - application/xml
        - application/json
      tags:
        - user
      operationId: loginUser
      responses:
        "200":
          description: successful operation
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
      parameters:
        - name: username
          in: query
          required: true
          type: string
        - name: password
          in: query
          required: true
          type: string
  /user/logout:
    get:
      summary: Logs out current logged in user session
      description: ""
      produces:
        - application/xml
        - application/json
      tags:
        - user
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      parameters: []
  "/user/{username}":
    get:
      summary: Get user by user name
      description: ""
      produces:
        - application/xml
        - application/json
      tags:
        - user
      operationId: getUserByName
      responses:
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/User"
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      parameters:
        - name: username
          in: path
          required: true
          type: string
    put:
      summary: Updated user
      description: This can only be done by the logged in user.
      produces:
        - application/xml
        - application/json
      tags:
        - user
      operationId: updateUser
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      parameters:
        - name: username
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
    delete:
      summary: Delete user
      description: This can only be done by the logged in user.
      produces:
        - application/xml
        - application/json
      tags:
        - user
      operationId: deleteUser
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      parameters:
        - name: username
          in: path
          required: true
          type: string
definitions:
  ApiResponse:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      type:
        type: string
  Category:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  Order:
    type: object
    properties:
      complete:
        type: boolean
      id:
        type: integer
        format: int64
      petId:
        type: integer
        format: int64
      quantity:
        type: integer
        format: int32
      shipDate:
        type: string
        format: date-time
      status:
        description: Order Status
        type: string
        enum:
          - placed
          - approved
          - delivered
  Pet:
    type: object
    required:
      - name
      - photoUrls
    properties:
      category:
        $ref: "#/definitions/Category"
      id:
        type: integer
        format: int64
      name:
        type: string
      photoUrls:
        type: array
        items:
          type: string
      status:
        description: pet status in the store
        type: string
        enum:
          - available
          - pending
          - sold
      tags:
        type: array
        items:
          $ref: "#/definitions/Tag"
  Tag:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
  User:
    type: object
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
        format: int64
      lastName:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        description: User Status
        type: integer
        format: int32
      username:
        type: string
schemes:
  - https
  - http
host: petstore.swagger.io
basePath: /v2
securityDefinitions:
  api_key:
    type: apiKey
  petstore_auth:
    type: oauth2
tags:
  - name: pet
    description: Everything about your Pets
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user